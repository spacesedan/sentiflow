// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
)

type Querier interface {
	CreateHeadline(ctx context.Context, arg CreateHeadlineParams) (Headline, error)
	// Inserts multiple headlines in a single query using UNNEST.
	// The order of parameters in the UNNEST function must match the order of columns in the INSERT statement.
	CreateHeadlinesBatch(ctx context.Context, arg []CreateHeadlinesBatchParams) *CreateHeadlinesBatchBatchResults
	CreateSentimentResult(ctx context.Context, arg CreateSentimentResultParams) (SentimentResult, error)
	// Inserts multiple sentiment results in a single query using UNNEST.
	CreateSentimentResultsBatch(ctx context.Context, arg []CreateSentimentResultsBatchParams) *CreateSentimentResultsBatchBatchResults
	DeleteHeadline(ctx context.Context, id string) error
	DeleteSentimentResult(ctx context.Context, contentID string) error
	GetHeadline(ctx context.Context, id string) (Headline, error)
	GetSentimentResult(ctx context.Context, contentID string) (SentimentResult, error)
	ListHeadlines(ctx context.Context, arg ListHeadlinesParams) ([]Headline, error)
	ListSentimentResultsByHeadline(ctx context.Context, arg ListSentimentResultsByHeadlineParams) ([]SentimentResult, error)
	// Example read query: lists results by their raw content source
	ListSentimentResultsBySource(ctx context.Context, arg ListSentimentResultsBySourceParams) ([]SentimentResult, error)
	UpdateHeadlineSentiment(ctx context.Context, arg UpdateHeadlineSentimentParams) (Headline, error)
}

var _ Querier = (*Queries)(nil)
