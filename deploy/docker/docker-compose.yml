services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: always
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      retries: 10
      start_period: 10s
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - ./deploy/docker/kafka/scripts/:/docker-entrypoint-initdb.d/
    depends_on:
      - zookeeper


  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: always
    ports:
      - "9000:9000"
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
      - SERVER_SERVLET_CONTEXTPATH=/
      - JVM_OPTS=-Xms32M -Xmx64M
    depends_on:
      kafka:
        condition: service_healthy


  # ---------------------------------------------------
  # Kafka Init
  # ---------------------------------------------------
  kafka-init:
    image: bitnami/kafka:latest
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
      echo '[kafka-init] Waiting for Kafka...';
      until kafka-topics.sh --bootstrap-server kafka:9092 --list > /dev/null 2>&1; do sleep 2; done;
      echo '[kafka-init] Creating topics...';
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic raw-content --partitions 6 --replication-factor 1;
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic summary-request --partitions 3 --replication-factor 1;
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic sentiment-request --partitions 3 --replication-factor 1;
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic sentiment-results --partitions 3 --replication-factor 1;
      echo '[kafka-init] âœ… Done creating topics.';
      "
    restart: "no"

  # ---------------------------------------------------
  # Kafka Consumers
  # ---------------------------------------------------

  # Raw Content Consumer
  raw-content-consumer:
    build:
      context: ../../
      dockerfile: cmd/consumer/Dockerfile
    container_name: raw-content-consumer
    volumes:
      - ./config/envs/.env.dev:/app/config/envs/.env.dev
    environment:
      APP_ENV: dev
      KAFKA_BROKER: kafka:9092
      KAFKA_CONSUMER_GROUP_ID: sentiflow-raw-consumer-group
      KAFKA_CONSUMER_TOPIC: raw-content
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    restart: unless-stopped

  # Summary Consumer
  summary-consumer:
    build:
      context: ../../
      dockerfile: cmd/consumer/Dockerfile
    container_name: summary-consumer
    volumes:
      - ../../config/envs/.env.dev:/app/config/envs/.env.dev
    environment:
      APP_ENV: dev
      KAFKA_BROKER: kafka:9092
      KAFKA_CONSUMER_GROUP_ID: sentiflow-summary-consumer-group
      KAFKA_CONSUMER_TOPIC: summary-request
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    restart: unless-stopped

  # Sentiment Consumer
  sentiment-analysis-consumer:
    build:
      context: ../../
      dockerfile: cmd/consumer/Dockerfile
    container_name: sentiment-analysis-consumer
    volumes:
      - ../../config/envs/.env.dev:/app/config/envs/.env.dev
    environment:
      APP_ENV: dev
      KAFKA_BROKER: kafka:9092
      KAFKA_CONSUMER_GROUP_ID: sentiflow-sentiment-consumer-group
      KAFKA_CONSUMER_TOPIC: sentiment-request
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    restart: unless-stopped
  # ---------------------------------------------------
  # DynamoDB Local
  # ---------------------------------------------------
  dynamodb:
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb_local
    ports:
      - "8000:8000"
    volumes:
      - "./dynamodb:/home/dynamodblocal/data"

  # ---------------------------------------------------
  # PostgreSQL
  # ---------------------------------------------------
  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=mydb
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ../../migrations:/migrations

  # ---------------------------------------------------
  # Valkey
  # ---------------------------------------------------
  valkey:
    image: valkey/valkey:latest
    ports:
      - "6379:6379"
    environment:
      - VALKEY_PASSWORD=mypassword
      - VALKEY_USERNAME=myuser
    volumes:
      - valkey_data:/data
    restart: unless-stopped
  # ---------------------------------------------------
  # Prometheus (NEW)
  # ---------------------------------------------------
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   ports:
  #     - "9090:9090"
  #   depends_on:
  #     - kafka
  #     - db

  # ---------------------------------------------------
  # Grafana
  # ---------------------------------------------------
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   depends_on:
  #     - prometheus
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin

volumes:
  db_data:
  valkey_data:
  # grafana_data:
  # prometheus_data:
