services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: always
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"  # Kafka for Docker containers
      - "29092:29092" # Kafka for local machine access
    # volumes:
    #   - ./kafka/scripts/init-kafka.sh:/docker-entrypoint-initdb.d/init-kafka.sh
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: always
    ports:
      - "9000:9000"  # ✅ Exposes Kafdrop UI on localhost
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092  # ✅ Connects to Kafka inside Docker
      - SERVER_SERVLET_CONTEXTPATH=/    # ✅ Ensures UI loads properly
      - JVM_OPTS=-Xms32M -Xmx64M  # ✅ Limits memory usage
    depends_on:
      - kafka

  # ---------------------------------------------------
  # DynamoDB Local
  # ---------------------------------------------------
  dynamodb:
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb_local
    ports:
      - "8000:8000"
    volumes:
      - "./dynamodb:/home/dynamodblocal/data"

  # ---------------------------------------------------
  # PostgreSQL
  # ---------------------------------------------------
  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=mydb
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ../../migrations:/migrations

  # ---------------------------------------------------
  # Valkey
  # ---------------------------------------------------
  valkey:
    image: valkey/valkey:latest
    ports:
      - "6379:6379"
    environment:
      - VALKEY_PASSWORD=mypassword
      - VALKEY_USERNAME=myuser
    volumes:
      - valkey_data:/data
    restart: unless-stopped
  # ---------------------------------------------------
  # Prometheus (NEW)
  # ---------------------------------------------------
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   ports:
  #     - "9090:9090"
  #   depends_on:
  #     - kafka
  #     - db

  # ---------------------------------------------------
  # Grafana
  # ---------------------------------------------------
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   depends_on:
  #     - prometheus
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  
# BART Transformer Service (Summarization) using Hugging Face
  bart:
    image: ghcr.io/huggingface/transformers-pytorch-gpu
    container_name: bart-service
    ports:
      - "8081:80"
    environment:
      - MODEL_NAME=facebook/bart-large-cnn
    restart: always

  # BERT Transformer Service (Sentiment Analysis) using Hugging Face
  bert:
    image: ghcr.io/huggingface/transformers-pytorch-gpu
    container_name: bert-service
    ports:
      - "8082:80"
    environment:
      - MODEL_NAME=nlptown/bert-base-multilingual-uncased-sentiment
    restart: always


volumes:
  db_data:
  valkey_data:
  # grafana_data:
  # prometheus_data:
